---
import Layout from "../layouts/Layout.astro";
import PricingSection from "../components/PricingSection";
---

<Layout>
  <PricingSection client:load />
</Layout>

<style>
  /* Enhanced 3D perspective transforms */
  .perspective-1000 {
    perspective: 1500px;
    transform-style: preserve-3d;
  }

  /* Enhancing 3D effect with custom properties */
  .pricing-card {
    backface-visibility: hidden;
    transform-style: preserve-3d;
    transition: transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.375);
  }

  /* Enhanced rotation effects with improved easing */
  .rotate-y-5:hover {
    transform: rotateY(5deg) scale(1.05) translateZ(30px);
    transition: transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .translate-z-10:hover {
    transform: translateZ(20px) scale(1.05);
    transition: transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .translate-z-12:hover {
    transform: translateZ(25px) scale(1.15);
    transition: transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  .scale-115:hover {
    transform: scale(1.15) translateZ(40px);
    transition: transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  }

  /* Advanced float animations with enhanced 3D depth */
  @keyframes float {
    0% {
      transform: translateY(0) rotate(0) translateZ(0);
    }
    50% {
      transform: translateY(-15px) rotate(2deg) translateZ(30px);
    }
    100% {
      transform: translateY(0) rotate(0) translateZ(0);
    }
  }

  /* Apply subtle float animation to pricing cards */
  .pricing-card {
    animation: float 8s infinite ease-in-out;
    animation-delay: calc(var(--index, 0) * 2s);
  }

  /* Enhanced pulse animation for price tags with better visibility */
  @keyframes pulse {
    0% {
      opacity: 0.2;
      transform: scale(1) translateZ(0);
    }
    50% {
      opacity: 0.4;
      transform: scale(1.08) translateZ(10px);
    }
    100% {
      opacity: 0.2;
      transform: scale(1) translateZ(0);
    }
  }

  .pulse-animation {
    animation: pulse 3s infinite ease-in-out;
  }

  /* Feature item hover effects with improved 3D depth */
  .feature-item {
    position: relative;
    transition: all 0.4s ease;
    transform-style: preserve-3d;
  }

  .feature-item::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background: currentColor;
    transition: width 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    transform: translateZ(2px);
  }

  .feature-item:hover::after {
    width: 100%;
  }

  /* Advanced 3D depth for buttons with spring effect */
  button {
    transform-style: preserve-3d;
    transition:
      transform 0.4s cubic-bezier(0.34, 1.56, 0.64, 1),
      box-shadow 0.4s ease;
  }

  button:hover {
    transform: translateY(-4px) translateZ(30px);
    box-shadow:
      0 15px 30px rgba(0, 0, 0, 0.15),
      0 5px 15px rgba(0, 0, 0, 0.07);
  }

  button:active {
    transform: translateY(-2px) translateZ(15px);
    transition: transform 0.2s ease;
  }

  /* Add enhanced layered shadows to create depth */
  .pricing-card {
    box-shadow:
      0 10px 30px rgba(0, 0, 0, 0.07),
      0 1px 8px rgba(0, 0, 0, 0.04),
      0 30px 60px rgba(0, 0, 0, 0.03);
  }

  .pricing-card:hover {
    box-shadow:
      0 25px 50px rgba(0, 0, 0, 0.12),
      0 10px 20px rgba(0, 0, 0, 0.07),
      0 40px 80px rgba(0, 0, 0, 0.05);
  }

  /* Advanced glow effect on hover with improved radial gradient */
  .pricing-card::before {
    content: "";
    position: absolute;
    inset: -15px;
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      rgba(255, 255, 255, 0.2),
      transparent 70%
    );
    border-radius: 3.5rem;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.5s ease;
    pointer-events: none;
  }

  .pricing-card:hover::before {
    opacity: 1;
  }

  /* New 3D layered card effect */
  .pricing-card::after {
    content: "";
    position: absolute;
    inset: 5px;
    border-radius: 2.5rem;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0.1),
      rgba(255, 255, 255, 0.05)
    );
    z-index: -1;
    opacity: 0;
    transition:
      opacity 0.3s ease,
      transform 0.3s ease;
    transform: translateZ(-10px);
    pointer-events: none;
  }

  .pricing-card:hover::after {
    opacity: 1;
    transform: translateZ(-5px);
  }
</style>

<script>
  // Enhanced staggered animation delay and interaction effects
  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".pricing-card");

    // Add staggered animation delays
    cards.forEach((card, index) => {
      card.style.setProperty("--index", index);
    });

    // Add enhanced glow effect tracking with improved smoothness
    cards.forEach((card) => {
      card.addEventListener("mousemove", (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left; // x position within the element
        const y = e.clientY - rect.top; // y position within the element

        // Update CSS variables for glow effect position with smoothing
        card.style.setProperty("--mouse-x", `${(x / rect.width) * 100}%`);
        card.style.setProperty("--mouse-y", `${(y / rect.height) * 100}%`);
      });
    });

    // Add advanced mousemove parallax effect to container with dampening
    const container = document.querySelector(".perspective-1000");
    let lastX = 0;
    let lastY = 0;
    const dampFactor = 0.1; // Smoothing factor

    if (container) {
      container.addEventListener("mousemove", (e) => {
        const cards = document.querySelectorAll(".pricing-card");
        const rect = container.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;

        // Calculate rotation based on mouse position with dampening
        const targetRotateY = (mouseX - centerX) / 40;
        const targetRotateX = (centerY - mouseY) / 40;

        // Apply damping for smoother movement
        const rotateY = lastX + (targetRotateY - lastX) * dampFactor;
        const rotateX = lastY + (targetRotateX - lastY) * dampFactor;

        lastX = rotateY;
        lastY = rotateX;

        cards.forEach((card, index) => {
          // Apply different rotation intensity based on card position
          const modifier = index === 1 ? 0.6 : 1; // Less rotation for featured card
          const depth = index === 1 ? 20 : 10;
          card.style.transform = `rotateY(${rotateY * modifier}deg) rotateX(${rotateX * modifier}deg) translateZ(${depth * modifier}px)`;
        });
      });

      // Enhanced reset on mouse leave with smooth transition
      container.addEventListener("mouseleave", () => {
        const cards = document.querySelectorAll(".pricing-card");
        cards.forEach((card) => {
          card.style.transition =
            "transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275)";
          card.style.transform = "rotateY(0) rotateX(0) translateZ(0)";

          // Reset transition after animation completes
          setTimeout(() => {
            card.style.transition = "";
          }, 1000);
        });

        // Reset the last position values
        lastX = 0;
        lastY = 0;
      });
    }
  });
</script>
